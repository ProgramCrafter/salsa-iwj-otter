#!/usr/bin/perl -w
use strict;

# xxx copyright and source information in library svg as output by server
# xxx at least original filename should be svg sent to clients
# xxx should be mentioned in copyright statement at bottom of game page

use POSIX;
use IO::Handle;
use TOML::Parser;
use Data::Dumper;
use Time::HiRes;
use Digest::MD5 qw(md5_hex);

our $max_rate = 2; # per second

#print Dumper($libinfo);

open DEBUG, ">&STDERR" or die $!;
autoflush DEBUG 1;

sub run_curl {
  my ($datalog, $output, $url, @xopts) = @_;
  return if stat $output;
  die "$output $!" unless $!==ENOENT;
  my @curl = (qw(curl -Ssf -L --proto-redir -all), @xopts);
  push @curl, '-o', "$output.tmp", $url;
  our $last_curl;
  $last_curl //= 0.;
  my $now = Time::HiRes::time;
  my $delay = 1./$max_rate - ($now - $last_curl);
  Time::HiRes::sleep $delay if $delay > 0;
  $last_curl = $now;
  print DEBUG "+ @curl\n";
  $!=$?=0; my $r = system @curl; die "curl failed ($? $!): @curl" if $r;
  my $logtime = strftime "%F %T UTC", gmtime time;
  print $datalog "$logtime: downloaded into $output from $url\n"
    or die $!;
  rename "$output.tmp", "$output" or die "install $output: $!";
}

sub method_wikimedia ($$) {
  my ($cfg, $methname) = @_;
  print DEBUG "METHOD $methname...\n";
  return sub {
    my ($filespec, $base) = @_;
    my $filename = $cfg->{filename_prefix}.$filespec.$cfg->{filename_suffix};
    print DEBUG "file $filespec $filename ";
    my $url = $cfg->{url_prefix}.$filename.$cfg->{url_suffix};
    my $wt = "$base.wikitext";
    my $datalog = new IO::File "$base.download-log", '>>' or die $!;
    print $datalog "\n" or die $!;
    run_curl $datalog, $wt, $url;
    open WT, "$wt" or die $!;
    my (@lics) = @{ $cfg->{licences} };
    s/\W/\\$&/g foreach @lics;
    my $lic1_re = '(?:'.(join '|', @lics).')';
    my $ok;
    while (<WT>) {
      s/\s+$//;
      if (m{^ \{\{ ($lic1_re) \}\} $}xi ||
	  m{^ \{\{ self\| (?:[^{}]*\|)? ($lic1_re) (?:\|[^{}]*)? \}\} $}xi) {
	print "licence=$1 ";
	$ok = 1;
	last;
      }
    }
    if (!$ok) {
      die "\nfile $wt from $url no appropriate licence $lic1_re";
    }
    my $data_url = $cfg->{data_url_prefix};
    if ($cfg->{data_url_hashprefix}) {
      # https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgHashedUploadDirectory
      md5_hex($filename) =~ m{^((.).)} or die;
      $data_url .= "$2/$1/";
    }
    $data_url .= $filename.$cfg->{data_url_suffix};
    my $ups = "$base.upstream.svg";
    run_curl $datalog, $ups, $data_url;
    close $datalog or die $!;
  };
}

my $input = $ARGV[0] // die;
$input =~ m/\.toml$/ or die "$input ?";
my $basename = $`;
mkdir $basename or $!==EEXIST or die "mkdir $basename: $!";

my $parser = TOML::Parser->new();
my $libinfo = $parser->parse_file($input);

foreach my $sect (values %$libinfo) {
  my $scraper = $sect->{scraper};
  next unless $scraper;
  my $method = $scraper->{method};
  my $fn = ${*::}{"method_$method"};
  my $method_fn = $fn->($scraper, $method);
  foreach (split(/\n/, $sect->{files})) {
    s/^\s+//;
    next if m/^\#/ || m/^$/;
    m/^\S+/;
    my $filespec = $&;
    my $base = "$basename/$filespec";
    $method_fn->($filespec, $base);
  }
}
