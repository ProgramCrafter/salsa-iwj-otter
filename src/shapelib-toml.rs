// Copyright 2020-2021 Ian Jackson and contributors to Otter
// SPDX-License-Identifier: AGPL-3.0-or-later
// There is NO WARRANTY.

pub use crate::imports::*;

pub type IE = InternalError;
pub type LLE = shapelib::LibraryLoadError;

#[derive(Debug,Deserialize)]
pub struct GroupDetails {
  /// Should be either a 1- or 2- element list, x and y, or just one
  /// number for both.
  pub size: Vec<f64>, // scaled when put into GroupData
  #[serde(default)] pub centre: [f64; 2],
  #[serde(default)] pub flip: bool,
  /// `size` and `centre` are in the SVG's own internal coordinate
  /// system, not the Otter scaled one generated by this scale factor.
  #[serde(default="num_traits::identities::One::one")] pub scale: f64,
  #[serde(default)] pub colours: HashMap<String, RecolourData>,
  /// One of `"Circle"` or `"Square"`
  #[serde(flatten)] pub outline: Box<dyn shapelib::OutlineDefn>,
}

#[derive(Debug,Deserialize)]
pub struct RecolourData {
  pub abbrev: String,
  #[cfg(doc)]
  /// Each entry is `"from" = "to"` where both are 6-character
  /// RGB hex strings (without the leading `#`).
  pub map: HashMap<String, String>,
}

#[derive(Debug,Deserialize)]
pub struct GroupDefn {
  /// `files` is a multi-line string, each line of which has three
  /// fields (the first two terminated by whitespace).  The fields
  /// are those in `FileData`.
  pub files: FileList,
  #[serde(default)] pub item_prefix: String,
  #[serde(default)] pub item_suffix: String,
  #[serde(flatten)] pub d: GroupDetails,
}

#[derive(Deserialize,Debug)]
#[serde(try_from="String")]
pub struct FileList(pub Vec<FileData>);

#[derive(Deserialize,Debug)]
pub struct FileData {
  pub item_spec: String,
  #[cfg(doc)] pub r_file_spec: String,
  #[cfg(not(doc))] pub r_file_spec: (),
  pub desc: Html,
}
